#+TITLE: Stumpwm configuration
#+AUTHOR: Cloud Strife (Spektrum_light, gear-piped, purity-interface, topological android GAR-XB/G-3778 id: MGlIGTfxzZ formula-spectre)
#+PROPERTY: header-args :tangle "~/.config/stumpwm/config" :mkdirp t :shebang ";; -*- mode: lisp -*- \n"
#+auto_tangle: t
*  this is my stumpwm configuration. batteries included, but not charged. please escuse my wonkiness on common lisp.  feel free to take this as inspiration and/or contribute!

** load quicklisp
#+BEGIN_SRC lisp
#-quicklisp
(let ((quicklisp-init (merge-pathnames ".local/share/quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))
#+END_SRC

** load slynk/swank
#+BEGIN_SRC lisp
(ql:quickload '(:slynk
                :alexandria
                :xembed))

(swank-loader:init)
(let ((server-running nil))
  (defcommand slynk () ()
    "Toggle the swank server on/off"
    (if server-running
        (progn
          (slynk:stop-server 4005)
          (echo-string
           (current-screen)
           "Stopping slynk.")
          (setf server-running nil))
        (progn
          (slynk:create-server :port 4005
                               :dont-close t)
          (echo-string
           (current-screen)
           "Starting slynk. M-x sly-connect RET RET, then (in-package stumpwm).")
          (setf server-running t)))))
;; smol commnad to open a repl automagically (the window-send-string part does not work yet)
(defcommand emacs-auto-slynk () ()
  (slynk)
  (emacs)
  (meta (kbd "M-x"))
  (window-send-string "sly-connect")
  (meta (kbd "RET"))
  (meta (kbd "RET"))
  (meta (kbd "RET"))
;  (window-send-string "(in-package :stumpwm)")
  (meta (kbd "RET")))

#+END_SRC
** load some modules
#+BEGIN_SRC lisp
#+END_SRC
** define some colors.
#+BEGIN_SRC lisp
(defvar *background* "#000000")
(defvar *foreground* "#FFFFFF")
#+END_SRC
** macros!
*** define a macro to make generate emacs commands
#+BEGIN_SRC lisp
(defmacro emacs-cmd (name emacs-command)
  "a macro that permits to easily define emacs commands"
    `(defcommand ,name () ()
       (emacs)
       (meta (kbd "M-x"))
       (window-send-string ,emacs-command)
       (meta (kbd "RET"))))
#+END_SRC
**** emacs commands
#+BEGIN_SRC lisp
(emacs-cmd emacs-magit    "magit")
(emacs-cmd emacs-calendar "=calendar")
#+END_SRC
*** define a macro to make mapping to various maps (heh) easier
#+BEGIN_SRC lisp
(defmacro mmap (map key command)
  "a macro to make binding easier"
  `(define-key ,map (kbd ,key) ,command))
#+END_SRC
*** make a macro for the alexandria-curry function
#+BEGIN_SRC lisp
(defmacro curry (map)
  `(alexandria:curry #'define-key ,map))
#+END_SRC
**  keybindings
***  make focus follow mouse
#+BEGIN_SRC lisp
(setf *mouse-focus-policy* :sloppy)
#+END_SRC

*** define a custom keymap for my most used applications
#+BEGIN_SRC lisp
(defvar *my-application-keymap*
  (let ((m (make-sparse-keymap)))
    (dolist
        (my-application-map `(
                              (,(kbd "l")   "exec librewolf")
                              (,(kbd "c")   "exec chromium")
                              (,(kbd "s")   "exec slack")
                              (,(kbd "t")   "exec boxxy thunderbird")
                              (,(kbd "C-t") "exec trello")
                              (,(kbd "d")   "exec dolphin")))
      (apply (curry m) my-application-map))))
#+END_SRC
*** define a custom keymap for emacs commands
#+BEGIN_SRC lisp
(defvar *emacs-application-keymap*
  (let ((m (make-sparse-keymap)))
    (dolist
        (emacs-map `(
                     (,(kbd "m") "emacs-magit")
                     (,(kbd "c") "emacs-calendar")
                     (,(kbd "C-s") "emacs-auto-slynk")))
      (apply (curry m) emacs-map))))

#+END_SRC
*** set the prefix to mod-x, to emulate emacs.
#+BEGIN_SRC lisp
(set-prefix-key (kbd "s-x"))
#+END_SRC
*** activate which key mode, which could be helpful.
#+BEGIN_SRC lisp
(unless (which-key-mode)
  (which-key-mode))
#+END_SRC
*** *root-map* keybindings, aka prefixed ones (see prefix-key)
#+BEGIN_SRC lisp
(undefine-key *root-map* (kbd "x"))
(dolist
    (root-map-bindings `(
                         (,(kbd "x")       ,*my-application-keymap*)
                         (,(kbd "1")       "only")
                         (,(kbd "2")       "vsplit")
                         (,(kbd "3")       "hsplit")
                         (,(kbd "0")       "remove-split")
                         (,(kbd "s-b")     "windowlist")
                         (,(kbd "s")       "slynk")
                         (,(kbd "S")        "eval (stumptray::stumptray)")
                         (,(kbd "d")       "time")
                         (,(kbd "M")       "mode-line")
                         (,(kbd "C-RET")   "exec emacsclient -ce '(comint-stumpish)'")
                         (,(kbd "s-h")     "move-window left")
                         (,(kbd "s-j")     "move-window down")
                         (,(kbd "s-k")     "move-window up")
                         (,(kbd "s-l")     "move-window right")
                         (,(kbd "C-e")      ,*emacs-application-keymap*)))
  (apply (curry *root-map*) root-map-bindings))
#+END_SRC
*** *top-level* keybindings, aka with no prefix
#+BEGIN_SRC lisp
(dolist
    (bindings `(
                (,(kbd "s-RET")     "exec emacsclient -ce '(+vterm/here \"~/\")'")
                (,(kbd "s-h")       "move-focus left")
                (,(kbd "s-j")       "move-focus down")
                (,(kbd "s-k")       "move-focus up")
                (,(kbd "s-l")       "move-focus right")
                (,(kbd "s-p")       "exec")
                (,(kbd "s-r")       "loadrc")
                (,(kbd "s-:")       "eval")
                (,(kbd "s-i")       "show-clipboard-history")))
  (apply (curry *top-map*) bindings))
#+END_SRC
**  modeline
**** formatting
here I format most of the modeline.
#+BEGIN_SRC lisp
(setf *mode-line-timeout* 1)
(setf *time-modeline-string* "%b %a %d (%H:%M:%S)")
;; set window title, truncate after 5 chars
(setf *window-format* "%n: %5t")
#+END_SRC
**** color the modeline!
#+BEGIN_SRC lisp
(let ((black "#000000")
      (white "#FFFFFF"))
  (setf *mode-line-background-color* black
        *mode-line-foreground-color* white
        *mode-line-border-color* white
        *mode-line-border-width 1)
        *mode-line-border-width 1)
#+END_SRC
**** load some modules
#+BEGIN_SRC lisp
(mapc #'load-module '("battery-portable"
                      "cpu"
                      "mem"
                      "clipboard-history"
                      "stumptray"))
#+END_SRC
**** format the various elements of the modeline
#+BEGIN_SRC lisp
(setf cpu::*cpu-modeline-fmt*        "%c:%f TEMP:%t "
      mem::*mem-modeline-fmt*        "%a%p"
      *hidden-window-color*          "^**"
      *mode-line-highlight-template* "<<~A>>")
#+END_SRC
*** format the status line
#+BEGIN_SRC lisp

(setf stumpwm:*screen-mode-line-format*
      (list "[%g]"
            "[%W]"
            "[%w]"
            "^>"
            "[%d]"
            "[%C]"
            "[MEM:%M]"
            "|"
            "%T"
            "|"
            ))
#+END_SRC
** initalization
things that have to be ran on startup.
the dbus thing is a crutch.
#+BEGIN_SRC lisp
(when *initializing*
  (progn
    (mode-line)
    (run-shell-command "~/.fehbg")))

(stumptray::stumptray)
(clipboard-history:start-clipboard-manager)
#+END_SRC
