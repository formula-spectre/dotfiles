;; -*- lisp-mode -*- 

#-quicklisp
(let ((quicklisp-init (merge-pathnames ".local/share/quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

  (unless (sb-ext:run-program "/usr/bin/lsof" '("-i" "TCP:4005"))
    (progn
      (ql:quickload :slynk)
      (slynk:create-server :dont-close t)))
  (ql:quickload :swank)

(defvar *background* "#000000")
(defvar *foreground* "#FFFFFF")

(defmacro emacs-cmd (name emacs-command)
    `(defcommand ,name () ()
       (emacs)
       (meta (kbd "M-x"))
       (window-send-string ,emacs-command)
       (meta (kbd "RET"))))

(defmacro mmap (map key command)
  `(define-key ,map (kbd ,key) ,command))

(setf *mouse-focus-policy* :sloppy)

(defvar *my-application-keymap*
  (let ((m (make-sparse-keymap)))
    (mmap m "l" "exec librewolf")
    (mmap m "c" "exec chromium")
    (mmap m "s" "exec slack")
    (mmap m "t" "exec boxxy thunderbird")
    (mmap m "C-t" "exec trello")
  m))

(set-prefix-key (kbd "s-x"))

(which-key-mode)

(mmap *root-map* "x"       '*my-application-keymap*)
(mmap *root-map* "1"       "remove-split")
(mmap *root-map* "2"       "vsplit")
(mmap *root-map* "3"       "hsplit")
(mmap *root-map* "0"       "remove-split")
(mmap *root-map* "s-b"     "windowlist")
(mmap *root-map* "d"       "time")
(mmap *root-map* "RET"     "exec emacsclient -ce '(eshell)'")
(mmap *root-map* "C-RET"   "exec emacsclient -ce '(+stumpish-vterm/here)'")
(mmap *root-map* "s-h"     "move-window left")
(mmap *root-map* "s-j"     "move-window down")
(mmap *root-map* "s-k"     "move-window up")
(mmap *root-map* "s-l"     "move-window right")

(mmap *top-map*  "s-RET"     "exec emacsclient -ce '(+vterm/here \"~/\")'")
(mmap *top-map*  "s-h"       "move-focus left")
(mmap *top-map*  "s-j"       "move-focus down")
(mmap *top-map*  "s-k"       "move-focus up")
(mmap *top-map*  "s-l"       "move-focus right")
(mmap *top-map*  "s-p"       "exec")
(mmap *top-map*  "s-r"       "loadrc")
(mmap *top-map*  "s-:"       "eval")

(setf *mode-line-timeout* 1)
(setf *time-modeline-string* "%b %a %d (%H:%M:%S)")
;; set window title, truncate after 5 chars
(setf *window-format* "%n: %5t")

(let ((black "#000000")
      (white "#FFFFFF"))
  (setf *mode-line-background-color* black
        *mode-line-foreground-color* white
        *mode-line-border-color* white
        *mode-line-border-width 1)
        *mode-line-border-width 1)

(load-module "battery-portable")
(load-module "cpu")
(load-module "mem")

(setf cpu::*cpu-modeline-fmt*        "%c"
      cpu::*cpu-usage-modeline-fmt*  "~A~2D%"
      mem::*mem-modeline-fmt*        "%a%p"
      *hidden-window-color*          "^**"
      *mode-line-highlight-template* "«~A»")

(load-module "stumptray")
(stumptray::stumptray)
(setf stumpwm:*screen-mode-line-format*
      (list ;;"[%g]"
            "[%W]"
            "[%w]"
            "^>"
            "[%d]"
            "[CPU:%C]"
            "[MEM:%M]"
;            "[BAT:%B]"
            ))

(macrolet ((run-prog (prog)
             `(sb-ext:run-program  (concatenate 'string "dbus-launch " ,prog))))
(when *initializing*
  (progn
    (sb-ext:run-program "sh" '("~/.fehbg"))
    (dbus-run-program "boxxy thunderbird")
    (dbus-run-program "trello")
    (dbus-run-program "keynav")
    (mode-line))))
