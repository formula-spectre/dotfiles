;; -*-Lisp-*-

;; load quicklisp
#-quicklisp
(let ((quicklisp-init (merge-pathnames ".local/share/quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))


;; change the prefix key to something else
(set-prefix-key (kbd "s-x"))
(which-key-mode)

;; make focus follow mouse
(setf *mouse-focus-policy* :sloppy)

;; define a custom keymap
(defvar *my-application-keymap*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "p") "exec")
    (define-key m (kbd "l") "exec librewolf")

  m))
;; modeline configuration



(setf *mode-line-timeout* "1")
(setf *time-modeline-string* "%b %a %d (%H:%M:%S)")
(setf *group-format* "%t"
      *window-format* "%n: %30t")

(setf *screen-mode-line-format*
      (list
       (format nil "~D" (substitute #\Space #\Newline (run-shell-command "xprop -root -notype -f WM_NAME '8u' | grep WM_NAME | cut -d= -f2"  t)))
       ))


(set-module-dir "/usr/share/stumpwm/contrib")
(load-module "stumptray")
(stumptray::stumptray)

(defvar *background* "#000000")
(defvar *foreground* "#FFFFFF")

(setf *time-modeline-string* "%a %b %e %k:%M")
(setf *mode-line-timeout* 2)
(setf *mode-line-background-color* *background*)
(setf *mode-line-foreground-color* *foreground*)
(setf *mode-line-border-color* *foreground*)
(setf *mode-line-border-width* 0)
(enable-mode-line (current-screen) (current-head) t)



(define-key *root-map* (kbd "x") '*my-application-keymap*)
(define-key *root-map* (kbd "1") "remove-split")
(define-key *root-map* (kbd "2") "vsplit")
(define-key *root-map* (kbd "3") "hsplit")
(define-key *root-map* (kbd "0") "remove-split")

(define-key *root-map* (kbd "SPC") "exec kermit")


(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")
(define-key *top-map* (kbd "s-p") "exec")
(define-key *top-map* (kbd "s-RET") "exec kermit")
(define-key *top-map* (kbd "s-r") "loadrc")
(define-key *top-map* (kbd "s-:") "eval")
