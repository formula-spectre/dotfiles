#+TITLE: Doom Emacs configuration
#+AUTHOR: Cloud Strife (Spektrum_light, gear-piped, purity-interface, topological android GAR-XB/G-3778 id: MGlIGTfxzZ formula-spectre, metamorfuoco)
#+PROPERTY: header-args :shebang ";;; $DOOMDIR/config.el -*- lexical-binding: t; -*-\n"
#+auto_tangle: t
this is my emacs configuration. it's not pretty. it's not functional. But it works for me. Deal with it
jokes aside, still working on improving both the org structure and the code itself. please do tell me that my elisp sucks, I need some CC
any help is appreciated :)

* leaf configuration
#+begin_src emacs-lisp
(straight-use-package 'leaf)
(straight-use-package 'leaf-keywords)


(require 'leaf)
(require 'leaf-keywords)
(leaf leaf-keywords
      :config (leaf-keywords-init))
#+end_src
* theme emacs
*** font
 #+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka Nerd Font" :size 14)
      doom-variable-pitch-font (font-spec :family "Iosevka Nerd Font" :size 15))
#+END_SRC
*** modeline
#+BEGIN_SRC emacs-lisp
(leaf doom-modeline
  :straight t
  :setq
    ((doom-modeline-support-imenu . t)
       (doom-modeline-height . 10)
       (doom-modeline-hud . t)
       (doom-modeline-icons . t)
       (doom-modeline-buffer-file-name-style . 'auto)
       (doom-modeline-major-mode-color-icon . t)
       (doom-modeline-buffer-state-icon . t)
       (doom-modeline-buffer-modification-icon . t)
       (doom-modeline-major-mode-icon . t)))
(setq truncate-lines nil)
(remove-hook 'vterm-mode-hook #'hide-mode-line-mode)


#+END_SRC
*** General appearence
#+BEGIN_SRC emacs-lisp
(leaf cyberpunk
  :config
  (load-theme 'cyberpunk t))

(setq doom-line-numbers-style 'relative)
(setq display-line-numbers-type 'relative)
 #+END_SRC

* mu4e configuration
 #+BEGIN_SRC emacs-lisp
(leaf mu4e
  :setq (
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (mu4e-change-filenames-when-moving . t)

  ;resh mail using isync every 10 minutes
  (mu4e-get-mail-command . "mbsync -a")
  (mu4e-root-maildir . "~/.local/mail")

  (mu4e-drafts-folder . "/[Gmail]/Drafts")
  (mu4e-sent-folder . "/[Gmail]/Sent Mail")
  (mu4e-refile-folder . "/[Gmail]/All Mail")
  (mu4e-trash-folder . "/[Gmail]/Trash")

  (mu4e-maildir-shortcuts .
        '(("/Inbox"             . ?i)
          ("/[Gmail]/Sent Mail" . ?s)
          ("/[Gmail]/Trash"     . ?t)
          ("/[Gmail]/Drafts"    . ?d)
          ("/[Gmail]/All Mail"  . ?a)))))
 #+END_SRC
* circe configuration
#+BEGIN_SRC emacs-lisp
;TODO: encrypt the password
(leaf circe
  :setq
  (circe-reduce-lurker-spam .t))
;; (circe-set-display-handler "JOIN" (lambda (&rest ignored) nil))
#+END_SRC
* org configuration
** set org directory
#+begin_src emacs-lisp
 (setq org-directory "~/org/")
#+end_src
** org-modern
#+begin_src emacs-lisp
  (leaf org-modern
    :straight t
    :hook ((org-mode-hook . org-modern-mode)))
#+end_src
** org-auto-tangle configuration
#+BEGIN_SRC emacs-lisp
(use-package org-auto-tangle
  :load-path "site-lisp/org-auto-tangle/"    ;; this line is necessary only if you cloned the repo in your site-lisp directory
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+END_SRC
** main configuration
#+begin_src emacs-lisp
  (leaf org
    :hook ((org-mode-hook . org-auto-tangle-mode)
           (org-mode-hook . org-indent-mode))
    :config
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist
                 '("m" . "src emacs-lisp")))
#+end_src
** add sway-mode as codeblocks
#+begin_src emacs-lisp
(after! org-babel
    (add-to-list 'org-src-lang-modes '("sway" . sway-lang-mode)))
(after! org-babel
    (add-to-list 'org-src-lang-modes '("sway" . sway-mode)))

#+end_src
* misc stuff
*** ibuffer
#+begin_src emacs-lisp
(leaf ibuffer
  :bind ("C-x b". ibuffer))
#+end_src
*** Load private stuff
#+BEGIN_SRC emacs-lisp
(when (file-exists-p (concat (getenv "DOOMDIR") "/private.el"))
  (load! (concat (getenv "DOOMDIR") "/private")))
#+END_SRC
*** all-the-icons-ivy
#+begin_src emacs-lisp
(leaf all-the-icons-ivy
    :straight t
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+end_src
*** frog-jumper configuration
#+BEGIN_SRC emacs-lisp
(leaf frog-jump-buffer
    :straight t    
    :init (setq frog-jump-buffer-use-all-the-icons-ivy t)
    :bind ("C-x C-b" . frog-jump-buffer))
#+END_SRC

*** gentoo specific stuff (WIP)
(when (string= (doom-system-distro) "gentoo")
  (require 'portage)
  (setq portage-full-upgrade-shmu-options '(:ask
                                           :verbose
                                           :update
                                           :newuse
                                           :deep
                                           :complete-graph y
                                           :with-bdeps y
                                           :backtrack 50
                                           :keep-going y
                                           ))
  (require 'magentoo))
#+END_SRC

*** TRAMP configuration
#+BEGIN_SRC emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+END_SRC
*** vterm configuration
#+BEGIN_SRC emacs-lisp
(setq vterm-kill-buffer-on-exit t
      vterm-term-environment-variable "xterm"
      vterm-shell "/bin/nu")

(add-hook 'vterm-mode-hook
          (lambda ()
            (local-set-key (kbd "M-:") 'eval-expression)))
#+END_SRC
*** crux configuration
#+begin_src emacs-lisp
  (leaf crux
    :straight t
    :bind ("C-k" . crux-kill-whole-line))
#+end_src
*** visual-regexp-steroids
#+begin_src emacs-lisp
  (leaf visual-regexp-steroids
    :straight t
    :bind ([remap query-replace] . vr/replace))
#+end_src
*** ivy
#+begin_src emacs-lisp
  (leaf avy
    :bind ([remap isearch-forward] . swiper))
#+end_src
*** prism
#+begin_src emacs-lisp
  ;; (leaf prism
  ;;   :straight t
  ;;   :hook ((prog-mode-hook . prism-mode)))
#+end_src
*** ement
#+begin_src emacs-lisp
(leaf ement
  :straight t
  :setq
  (ement-save-sessions . t))
#+end_src
* keybindings
**** here I define some keybindings
***** defining hydras
****** hydra-modes
#+BEGIN_SRC emacs-lisp
(defhydra hydra-modes ( :color pink :exit t)
  "various major modes"
  ("t" text-mode "text mode")
  ("o" org-mode "org mode")
  ("w" writeroom-mode "writeroom mode")
  ("e" emacs-lisp-mode "elisp mode")
  ("q" nil "quit"))
#+END_SRC
****** hydra-buffer
#+begin_src emacs-lisp
(defhydra hydra-buffer (:exit t
                        :hint nil)
  "
^manage buffers^
_c_: create buffer      _p_: prev buffer
_k_: kill buffer        _n_: next buffer
_i_: ibuffer
"
  ("c" +default/new-buffer)
  ("k" kill-this-buffer )
  ("n" next-buffer )
  ("p" previous-buffer)
  ("i" ibuffer))
#+end_src
**** here I use (map!)
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:desc "modes" "m" #'hydra-modes/body)
      (:desc "pass-store-copy" "M-p" #'password-store-copy)
      (:desc "pass-Store-Copy-Field" "C-M-p" #'password-store-copy-field)
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("t" . "toggle")
                     (:prefix-map ("t" . "telega")
                                  (:desc "start telega"       "t" (lambda () (interactive) (telega t)))
                                  ;(:desc "start telega"       "t" #'telega)
                                  (:desc "telega chat with"   "c" #'telega-chat-with)
                                  (:desc "kill telega"        "q" #'telega-kill)))

      )
#+END_SRC

**** Global Keys
#+Begin_src emacs-lisp
(global-set-key (kbd "C-\\") #'undo)
(global-set-key (kbd "M-:") #'eval-expression) ;just to enforce it. maybe not needed? TODO: investigate
#+end_src
* Telega configuration
 this some configuration for telega
 #+BEGIN_SRC emacs-lisp
;FIXME!
 ;; (leaf telega
 ;;   :setq
 ;;   (telega-server-libs-prefix . "/usr")
 ;;   (telega-appindicator-use-labels . t)
 ;;   (telega-chat-input-markups . '("org" "markdown2"))
 ;;   (telega-directory . "~/.local/share/telega")
 ;;   (telega-emoji-font-family . "Iosevka Nerd Font")
 ;;   (telega-emoji-use-images . t)
 ;;   :hook
 ;;   ((telega-load-hook  .telega-notifications-mode)
 ;;    (telega-load-hook . telega-appindicator-mode)
 ;;    (telega-chat-mode-hook . toggle-truncate-lines)
 ;;    (telega-load-hook . telega-mode-line-mode)))
(setq telega-server-libs-prefix "/usr")
(add-hook 'telega-load-hook 'telega-notifications-mode)
(add-hook 'telega-load-hook 'telega-appindicator-mode)
(setq telega-appindicator-use-labels t)

(setq telega-chat-input-markups '("org" "markdown2"))
(setq telega-directory (concat (getenv "XDG_DATA_HOME") "/telega"))
(setq telega-emoji-font-family "Iosevka Nerd Font")
(setq telega-emoji-use-images t)
;;(add-hook 'telega-chat-mode-hook 'toggle-truncate-lines 'visual-line-mode)
(add-hook 'telega-load-hook 'telega-mode-line-mode)
;;(add-hook 'telega-chats-fetched-hook (lambda () (telega-chatbuf--get-create (telega-chat-get "963417534"))))
(define-key global-map (kbd "C-c t t") telega-prefix-map)
#+END_SRC
