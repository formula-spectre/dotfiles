#+TITLE: Doom Emacs configuration
#+AUTHOR: Cloud Strife (Spektrum_light, gear-piped, purity-interface, topological android GAR-XB/G-3778 id: MGlIGTfxzZ formula-spectre, metamorfuoco)
#+PROPERTY: header-args :shebang ";;; $DOOMDIR/config.el -*- lexical-binding: t; -*-\n"
#+auto_tangle: t
this is my emacs configuration. it's not pretty. it's not functional. But it works for me. Deal with it
jokes aside, still working on improving both the org structure and the code itself. please do tell me that my elisp sucks, I need some CC
any help is appreciated :)

* leaf configuration
#+begin_src emacs-lisp
(straight-use-package 'leaf)
(straight-use-package 'leaf-keywords)


(require 'leaf)
(require 'leaf-keywords)
(leaf leaf-keywords
      :config (leaf-keywords-init))
#+end_src
* theme emacs
*** font
 #+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "LispMMonospace Nerd Font" :size 14)
      doom-variable-pitch-font (font-spec :family "LispMMonospace Nerd Font" :size 15))
#+END_SRC
*** modeline
#+BEGIN_SRC emacs-lisp
(leaf doom-modeline
  :straight t
  :setq
    ((doom-modeline-support-imenu . t)
       (doom-modeline-height . 10)
       (doom-modeline-hud . t)
       (doom-modeline-icons . t)
       (doom-modeline-buffer-file-name-style . 'auto)
       (doom-modeline-major-mode-color-icon . t)
       (doom-modeline-buffer-state-icon . t)
       (doom-modeline-buffer-modification-icon . t)
       (doom-modeline-major-mode-icon . t)))
(setq truncate-lines nil)
(remove-hook 'vterm-mode-hook #'hide-mode-line-mode)


#+END_SRC
*** General appearence
#+BEGIN_SRC emacs-lisp
(leaf cyberpunk
  :config
  (load-theme 'cyberpunk t))

(setq doom-line-numbers-style 'relative)
(setq display-line-numbers-type 'relative)
 #+END_SRC

* mu4e configuration
 #+BEGIN_SRC emacs-lisp
(leaf mu4e
  :setq (
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (mu4e-change-filenames-when-moving . t)

  ;resh mail using isync every 10 minutes
  (mu4e-get-mail-command . "mbsync -a")
  (mu4e-root-maildir . "~/.local/mail")

  (mu4e-drafts-folder . "/[Gmail]/Drafts")
  (mu4e-sent-folder . "/[Gmail]/Sent Mail")
  (mu4e-refile-folder . "/[Gmail]/All Mail")
  (mu4e-trash-folder . "/[Gmail]/Trash")

  (mu4e-maildir-shortcuts .
        '(("/Inbox"             . ?i)
          ("/[Gmail]/Sent Mail" . ?s)
          ("/[Gmail]/Trash"     . ?t)
          ("/[Gmail]/Drafts"    . ?d)
          ("/[Gmail]/All Mail"  . ?a)))))
 #+END_SRC
* circe configuration
#+BEGIN_SRC emacs-lisp
;TODO: encrypt the password
(leaf circe
  :setq
  (circe-reduce-lurker-spam .t))
;; (circe-set-display-handler "JOIN" (lambda (&rest ignored) nil))
#+END_SRC
* org configuration
** set org directory
#+begin_src emacs-lisp
 (setq org-directory "~/org/")
#+end_src
** org-modern
#+begin_src emacs-lisp
  (leaf org-modern
    :straight t
    :hook ((org-mode-hook . org-modern-mode)))
#+end_src
** org-auto-tangle configuration
#+BEGIN_SRC emacs-lisp
(use-package org-auto-tangle
  :load-path "site-lisp/org-auto-tangle/"    ;; this line is necessary only if you cloned the repo in your site-lisp directory
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+END_SRC
** main configuration
#+begin_src emacs-lisp
  (leaf org
    :hook ((org-mode-hook . org-auto-tangle-mode)
           (org-mode-hook . org-indent-mode))
    :config
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist
                 '("m" . "src emacs-lisp")
                 '("sw" "src conf-space")))
#+end_src
* misc stuff
*** ibuffer
#+begin_src emacs-lisp
(leaf ibuffer
  :setq ((ibuffer-default-sorting-mode 'major-mode))
  :hook ((ibuffer-mode-hook . ibuffer-auto-mode)
         (ibuffer-mode-hook . (lambda ()
                                (ibuffer-switch-to-saved-filter-groups "default"))))
  :bind ("C-x b". ibuffer))
;;; TODO: put me in the leaf definition!
(setq ibuffer-saved-filter-groups
       (quote (("default"
                ("ement" (name . "^\\*Ement"))
                ("telega" (or
                           (mode . telega-chat-mode)
                           (mode . telega-root-mode )))
                ("emacs" (or
                          (name . "\\*scratch\\*")
                          (name . "\\*Messages\\*")))
                ("vterms" (mode . vterm-mode))
                ("eat terminals" (mode . eat-mode))
                ))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src
*** Load private stuff
#+BEGIN_SRC emacs-lisp
(when (file-exists-p (concat (getenv "DOOMDIR") "/private.el"))
  (load! (concat (getenv "DOOMDIR") "/private")))
#+END_SRC
*** all-the-icons-ivy
#+begin_src emacs-lisp
(leaf all-the-icons-ivy
    :straight t
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+end_src
*** frog-jumper configuration
#+BEGIN_SRC emacs-lisp
(leaf frog-jump-buffer
    :straight t    
    :init (setq frog-jump-buffer-use-all-the-icons-ivy t)
    :bind ("C-x C-b" . frog-jump-buffer))
#+END_SRC

*** gentoo specific stuff (WIP)
#+begin_src emacs-lisp
(leaf sudo-edit
  :custom ((sudo-edit-local-method . "sudo")))
#+END_SRC
#+begin_src emacs-lisp

(require 'portage)
(setq portage-full-upgrade-shmu-options '(:ask
                                          :verbose
                                          :update
                                          :newuse
                                          :deep
                                          :complete-graph y
                                          :with-bdeps y
                                          :backtrack 50
                                          :keep-going y
                                          ))
      (require 'magentoo)
#+end_src

*** TRAMP configuration
#+BEGIN_SRC emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+END_SRC
*** vterm configuration
#+BEGIN_SRC emacs-lisp
(setq vterm-kill-buffer-on-exit t
      vterm-term-environment-variable "xterm"
      vterm-shell "/bin/nu")

(add-hook 'vterm-mode-hook
          (lambda ()
            (local-set-key (kbd "M-:") 'eval-expression)))
#+END_SRC
*** crux configuration
#+begin_src emacs-lisp
   ;; (leaf crux
   ;;  :straight t
;;  :bind ("C-k" . crux-kill-whole-line))
(setq kill-whole-line t)
*** visual-regexp-steroids
#+begin_src emacs-lisp
  (leaf visual-regexp-steroids
    :straight t
    :bind ([remap query-replace] . vr/replace))
#+end_src

#+begin_src emacs-lisp
;;; FIXME!
(define-key global-map (kbd "M-%") 'vr/replace)
#+end_src
*** ivy
#+begin_src emacs-lisp
  (leaf avy
    :bind ([remap isearch-forward] . swiper))
#+end_src
*** prism
#+begin_src emacs-lisp
  ;; (leaf prism
  ;;   :straight t
  ;;   :hook ((prog-mode-hook . prism-mode)))
#+end_src
*** ement
#+begin_src emacs-lisp
(leaf ement
  :straight t
  :setq
  ((ement-save-sessions . t))
;FIXME!
;  :config
;  ((keymap-set ement-room-minibuffer-map "TAB" . completion-at-point))
)
;; put us in the leaf definition!
(require 'ement)
(define-key ement-room-mode-map (kbd "e") 'ement-room-edit-message)
(define-key ement-room-mode-map (kbd "r") 'ement-room-write-reply)
#+end_src
*** ednc
#+begin_src emacs-lisp
;;FIXME!
(require 'ednc)
 (defun stack-notifications (&optional hide)
  (mapconcat (lambda (notification)
               (let ((app-name (ednc-notification-app-name notification)))
                 (unless (member app-name hide)
                   (push app-name hide)
                   (ednc-format-notification notification))))
             (ednc-notifications) ""))
(nconc global-mode-string '((:eval (stack-notifications))))
(add-hook 'ednc-notification-presentation-functions
          (lambda (&rest _) (force-mode-line-update t)))

#+end_src
*** woman configuration
#+begin_src emacs-lisp
(leaf woman
  :setq (woman-path .'("/usr/share/gcc-data/x86_64-gentoo-linux-musl/12.2.0/man"
                        "/usr/share/binutils-data/x86_64-gentoo-linux-musl/2.39/man"
                        "/usr/local/share/man" "/usr/share/man" "/usr/lib/rust/man"
                        "/usr/lib/llvm/17/share/man" "/usr/lib/llvm/16/share/man" "/opt/plan9/man"
                        "/etc/eselect/wine/share/man")))
#+end_src
*** custom functions
here I define some custom functions as to make my life easier
- nchat :: just an eat buffer with nchat started
  #+begin_src emacs-lisp
(defun nchat ()
  (interactive)
  (setq eat-kill-buffer-on-exit t
        eat-buffer-name "*nchat*")
  (eat "nchat"))
  #+end_src
- vterm-wrapped :: so I can have vterm buffers with custom names
  #+begin_src emacs-lisp
(cl-defun vterm-wrapped (&key buffer-name)
  "start vterm but with a custom buffer name"
  (interactive)
  (vterm buffer-name))
  #+end_src
- eat-wrapped :: ditto for ~vterm-wrapped~, but for eat
  #+begin_src emacs-lisp
(cl-defun eat-wrapped (&key buffer-name)
  "start eat but with a custom buffer name"
  (interactive)
  (setq eat-kill-buffer-on-exit t
        eat-buffer-name buffer-name)
    (eat))
  #+end_src
- discordo :: a wrapper for the discordo TUI client using eat
  #+begin_src emacs-lisp
(defun discordo ()
  (interactive)
  (setq eat-kill-buffer-on-exit t
        eat-buffer-name "*discordo*")
  (eat "discordo"))
  #+end_src
- vi-yank-line :: a function to emulate vim's ~yy~
  #+begin_src emacs-lisp
(defun vi-yank-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring.
      Ease of use features:
      - Move to start of next line.
      - Appends the copy on sequential calls.
      - Use newline as last char even on the last line of the buffer.
      - If region is active, copy its lines."
  (interactive "p")
  (let ((beg (line-beginning-position))
        (end (line-end-position arg)))
    (when mark-active
      (if (> (point) (mark))
          (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
        (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
    (if (eq last-command 'copy-line)
        (kill-append (buffer-substring beg end) (< end beg))
      (kill-ring-save beg end)))
  (kill-append "\n" nil)
  (beginning-of-line (or (and arg (1+ arg)) 2))
  (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

#+end_src

* keybindings
**** here I define some keybindings
***** defining hydras
****** hydra-modes
#+BEGIN_SRC emacs-lisp
(defhydra hydra-modes ( :color pink :exit t)
  "various major modes"
  ("t" text-mode "text mode")
  ("o" org-mode "org mode")
  ("w" writeroom-mode "writeroom mode")
  ("g" god-mode "toggle god-mode")
  ("l" lispy-mode "toggle lispy mode")
  ("e" ednc-mode "toggle ednc mode")
  ("q" nil "quit"))
#+END_SRC
****** hydra-buffer
#+begin_src emacs-lisp
(defhydra hydra-buffer (:exit t
                        :hint nil)
  "
^manage buffers^
_c_: create buffer      _p_: prev buffer
_k_: kill buffer        _n_: next buffer
_i_: ibuffer            _s_: switch to scratch buffer
"
  ("c" +default/new-buffer)
  ("k" kill-this-buffer )
  ("n" next-buffer )
  ("p" previous-buffer)
  ("s" (lambda () (interactive) (switch-to-buffer "*scratch*")))
  ("i" ibuffer))
#+end_src
**** here I use (map!)
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)
                   (:desc "copy line vi-style" "y" #'vi-yank-line)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
                        (map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
                        (map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
(map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
                        (map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
                        (map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
                        (map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
        (map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
(map! :leader
      (:desc "buffer management" "b" #'hydra-buffer/body)
      (:prefix-map ("SPC" . "Custom prefix")
                   (:desc "modes" "m" #'hydra-modes/body)
                   (:desc "set mark" "SPC" #'set-mark-command)

                   (:prefix-map ("s" . "socials")
                                (:desc "start nchat" "n" #'nchat)
                                (:prefix-map ("t" . "telega")
                                             (:desc "start telega" "t" (lambda () (interactive) (telega t)))
                                             (:desc "chat with someone" "c" #'telega-chat-with)
                                             (:desc "stop telega" "q" #'telega-kill)
                                             (:desc "GOTO telega's rootbuf" "r" (lambda () (interactive) (switch-to-buffer "*Telega Root*")))
                                             (:desc "filter by topic" "f" #'telega-chatbuf-filter-by-topic))

                                (:prefix-map ("e" . "ement")
                                             (:desc "start ement" "e" (lambda () (interactive) (ement-connect :uri-prefix "http://localhost:8008")))
                                             (:desc "quit ement" "q" #'ement-disconnect)
                                             (:desc "show rooms" "l" #'ement-list-rooms))
                                )
                   (:prefix-map ("p" . "password-store")
                                (:desc "copy userfield" "u" #'password-store-copy-field)
                                (:desc "copy password" "p" #'password-store-copy)
                                (:desc "copy OTP for field" "o" #'password-store-otp-token-copy))
                   (:prefix-map ("o" . "open")
                                (:desc "open eat" "e" #'eat))))
#+END_SRC

**** Global Keys
#+Begin_src emacs-lisp
(global-set-key (kbd "C-\\") #'undo)
(require 'vterm)
(define-key vterm-mode-map (kbd "C-q") #'vterm-send-next-key)
#+end_src
* Telega configuration
 this some configuration for telega
 #+BEGIN_SRC emacs-lisp
(leaf telega
  :hook
  ((telega-load-hook . telega-notifications-mode)
   (telega-load-hook . telega-appindicator-mode)
   (telega-load-hook . telega-mode-line-mode))
  :setq
  ((telega-server-libs-prefix . "/usr")
   (telega-appindicator-use-labets . t)
   ;; make it so the checkmark is on the same
   (visual-fill-column-extra-text-width . '(0 . 4))
   (telega-chat-input-markups . '("org" "markdown2"))
   (telega-emoji-font-family . "LispMMonospace Nerd Font")
   (telega-emoji-use-images . t))
  ;; :bind
  ;; (:global-map
  ;;  ("C-c t t" . telega-prefix-map))
  )

;; #FIXME!
(require 'telega)
(define-key global-map (kbd "C-c SPC s  t") telega-prefix-map)

#+END_SRC

* after all this said and done, I need to write for readiness notification:
#+begin_src emacs-lisp
;; (add-hook 'after-init-hook (lambda () (shell-command "echo >&9")))
#+end_src
